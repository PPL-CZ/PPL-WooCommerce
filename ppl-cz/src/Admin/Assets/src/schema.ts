/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = Record<string, never>;

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ProductModel: {
      pplConfirmAge15?: boolean | null;
      pplConfirmAge18?: boolean | null;
      pplDisabledParcelBox?: boolean | null;
      pplDisabledAlzaBox?: boolean;
      pplDisabledParcelShop?: boolean | null;
      pplDisabledTransport?: string[] | null;
    };
    CategoryModel: {
      pplDisabledParcelBox?: boolean | null;
      pplDisabledAlzaBox?: boolean;
      pplDisabledParcelShop?: boolean | null;
      pplDisabledTransport?: string[] | null;
    };
    ParcelDataModel: {
      name?: string | null;
      activeCardPayment?: boolean | null;
      activeCashPayment?: boolean | null;
      code?: string | null;
      country?: string | null;
      openHours?: string[] | null;
      street?: string | null;
      city?: string | null;
      zipCode?: string | null;
      id?: number | null;
      rnd?: number | null;
      accessPointType?: string | null;
      gps?: ({
        latitude?: number | null;
        longitude?: number | null;
      }) | null;
    };
    ParcelPlacesModel: {
      disabledParcelBox?: boolean | null;
      disabledAlzaBox?: boolean | null;
      disabledParcelShop?: boolean | null;
    };
    MyApi2: {
      client_id: string | null;
      client_secret: string | null;
    };
    WhisperSettingModel: {
      active: boolean | null;
      url?: string | null;
    };
    WhisperAddressModel: {
      city?: string | null;
      zipCode?: string | null;
      street?: string | null;
      houseNumber?: string | null;
      evidenceNumber?: string | null;
    };
    UpdateShipmentModel: {
      referenceId: string | null;
      codVariableNumber?: string | null;
      codValue?: number | null;
      codValueCurrency?: string | null;
      codBankAccountId?: number | null;
      senderId?: number | null;
      serviceCode: string | null;
      orderId?: number | null;
      hasParcel?: boolean | null;
      parcelId?: number | null;
      age?: string | null;
      note?: string | null;
      packages: components["schemas"]["PackageModel"][] | null;
    };
    UpdateParcelModel: {
      parcelCode?: string | null;
    };
    UpdateShipmentSenderModel: {
      senderId: number | null;
    };
    UpdateShipmentParcelModel: {
      parcelCode: string | null;
      hasParcel?: boolean | null;
    };
    CreateShipmentLabelBatchModel: {
      printSetting: string | null;
      shipmentId: number[] | null;
    };
    ShipmentLabelRefreshBatchModel: {
      shipmentId: number[] | null;
    };
    PrepareShipmentBatchModel: {
      items: components["schemas"]["PrepareShipmentBatchItemModel"][] | null;
    };
    PrepareShipmentBatchItemModel: {
      orderId?: number | null;
      shipmentId?: number | null;
    };
    PrepareShipmentBatchReturnModel: {
      shipmentId?: number[] | null;
    };
    RefreshShipmentBatchReturnModel: {
      batchs?: string[] | null;
      shipments?: components["schemas"]["ShipmentModel"][] | null;
    };
    PackageModel: {
      id?: number | null;
      shipmentNumber?: string | null;
      referenceId?: string | null;
      labelId?: string | null;
      importError?: string | null;
      importErrorCode?: string | null;
      weight?: number | null;
      insurance?: number | null;
      insuranceCurrency?: string | null;
      phase?: string | null;
      phaseLabel?: string | null;
      lastUpdatePhase?: string | null;
      ignorePhase?: boolean | null;
    };
    ParcelAddressModel: {
      id?: number | null;
      code?: string | null;
      name?: string | null;
      name2?: string | null;
      street?: string | null;
      city?: string | null;
      zip?: string | null;
      country?: string | null;
      remoteId?: string | null;
      type?: string | null;
      lat?: number | null;
      lng?: number | null;
    };
    LabelPrintModel: {
      title: string;
      code: string;
    };
    CollectionAddressModel: {
      street: string | null;
      city: string | null;
      zip: string | null;
      country: string | null;
      code?: string | null;
      name?: string | null;
      default?: boolean | null;
    };
    SenderAddressModel: {
      id?: number | null;
      addressName: string | null;
      name: string | null;
      contact?: string | null;
      street: string | null;
      city: string | null;
      zip: string | null;
      country: string | null;
      mail?: string | null;
      phone?: string | null;
      note?: string | null;
    };
    RecipientAddressModel: {
      contact?: string | null;
      name: string | null;
      street: string | null;
      city: string | null;
      zip: string | null;
      country: string | null;
      mail?: string | null;
      phone?: string | null;
    };
    CartModel: {
      priceWithDph?: boolean | null;
      parcelRequired?: boolean | null;
      parcelBoxEnabled?: boolean | null;
      parcelShopEnabled?: boolean | null;
      alzaBoxEnabled?: boolean | null;
      mapEnabled?: boolean | null;
      disabledByWeight?: boolean | null;
      disabledByRules?: boolean | null;
      disabledByCountry?: boolean;
      ageRequired?: boolean | null;
      codPayment?: string | null;
      serviceCode?: string;
      disablePayments?: string[] | null;
      disabledByProduct?: boolean;
      disableCod?: boolean | null;
      codFee?: number | null;
      cost?: number | null;
    };
    ShipmentModel: {
      id?: number | null;
      packages?: components["schemas"]["PackageModel"][] | null;
      printState?: string | null;
      /** @enum {string|null} */
      importState?: "None" | "Accepted" | "InProcess" | "Complete" | "Error" | null;
      referenceId?: string | null;
      note?: string | null;
      codValue?: number | null;
      codValueCurrency?: string | null;
      codVariableNumber?: string | null;
      serviceCode?: string | null;
      serviceName?: string | null;
      batchLabelGroup?: string | null;
      hasParcel?: boolean | null;
      orderId?: number | null;
      parcel?: components["schemas"]["ParcelAddressModel"];
      recipient?: components["schemas"]["RecipientAddressModel"];
      sender?: components["schemas"]["SenderAddressModel"];
      age?: string | null;
      lock?: boolean | null;
      importErrors?: string[] | null;
      /** @enum {string|null} */
      phase?: "Undelivered" | "Delivered" | "PickedUpFromSender" | "DeliveredToPickupPoint" | "OutForDelivery" | "NotDelivered" | "CodPaidDate" | "BackToSender" | "Rejected" | "DataShipment" | "Active" | "Canceled" | "Dormant" | null;
    };
    CurrencyModel: {
      code: string;
      title: string;
    };
    ShipmentPhaseModel: {
      code: string;
      title: string;
      watch: boolean;
    };
    SyncPhasesModel: {
      maxSync: number | null;
      phases: components["schemas"]["ShipmentPhaseModel"][] | null;
    };
    UpdateSyncPhasesModel: {
      maxSync?: number | null;
      phases?: (({
          code: string | null;
          watch: boolean | null;
        })[]) | null;
    };
    CountryModel: {
      code: string;
      title: string;
      parcelAllowed: boolean;
      codAllowed: string[];
    };
    ShipmentMethodModel: {
      code: string;
      title: string;
      codAvailable: boolean;
      parcelRequired: boolean;
    };
    NewCollectionModel: {
      sendDate: string;
      contact?: string | null;
      estimatedShipmentCount?: number | null;
      telephone?: string | null;
      note?: string | null;
      email?: string | null;
    };
    CollectionModel: {
      id: number;
      remoteCollectionId?: string | null;
      referenceId: string;
      createdDate: string;
      sendDate: string;
      sendToApiDate?: string | null;
      /** @enum {string} */
      state?: "BeforeSend" | "None" | "Created" | "PickedUp" | "NotPickedUp" | "Canceled";
      estimatedShipmentCount?: number | null;
      shipmentCount: number;
      contact?: string | null;
      telephone?: string | null;
      note?: string | null;
      email?: string | null;
    };
    ShipmentMethodSettingModel: {
      code: string;
      costByWeight?: boolean | null;
      parcelBoxes?: boolean | null;
      title?: string | null;
      description?: string | null;
      disablePayments?: string[];
      codPayment?: string | null;
      priceWithDph?: boolean | null;
      currencies: components["schemas"]["ShipmentMethodSettingCurrencyModel"][];
      weights: components["schemas"]["ShipmentMethodSettingWeightRuleModel"][];
      disabledParcelBox?: boolean | null;
      disabledAlzaBox?: boolean | null;
      disabledParcelShop?: boolean | null;
    };
    ShipmentMethodSettingCurrencyModel: {
      enabled?: boolean | null;
      currency: string;
      costOrderFree?: number | null;
      costCodFee?: number | null;
      costCodFeeAlways?: boolean | null;
      costOrderFreeCod?: number | null;
      cost?: number | null;
    };
    ShipmentMethodSettingPriceRuleModel: {
      price?: number | null;
      currency: string;
    };
    ShipmentMethodSettingWeightRuleModel: {
      from?: number | null;
      to?: number | null;
      disabledParcelBox?: boolean | null;
      disabledAlzaBox?: boolean;
      disabledParcelShop?: boolean | null;
      prices: components["schemas"]["ShipmentMethodSettingPriceRuleModel"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
